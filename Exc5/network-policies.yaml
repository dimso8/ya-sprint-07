# Управление входяшим трафиком для "обычного" бэкенд-сервиса
# Разрешаем только входящий трафик от "обычного" фронтенд-сервиса
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-front-back
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: back-end
  policyTypes:
  - Ingress
  ingress:
  - from:
      - podSelector:
          matchLabels:
            role: front-end
---
# Управление входяшим трафиком для "обычного" фронтенд-сервиса
# Разрешаем только входящий трафик от "обычного" бэкенд-сервиса
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-back-front
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: front-end
  policyTypes:
  - Ingress
  ingress:
  - from:
      - podSelector:
          matchLabels:
            role: back-end
---
# Управление входяшим трафиком для "админского" бэкенд-сервиса
# Разрешаем только входящий трафик от "админского" фронтенд-сервиса
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-admin-front-back
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: admin-back-end
  policyTypes:
  - Ingress
  ingress:
  - from:
      - podSelector:
          matchLabels:
            role: admin-front-end
---
# Управление входяшим трафиком для "админского" фронтенд-сервиса
# Разрешаем только входящий трафик от "админского" бэкенд-сервиса
kind: NetworkPolicy
apiVersion: networking.k8s.io/v1
metadata:
  name: allow-admin-back-front
  namespace: default
spec:
  podSelector:
    matchLabels:
      role: admin-front-end
  policyTypes:
  - Ingress
  ingress:
  - from:
      - podSelector:
          matchLabels:
            role: admin-back-end